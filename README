[ JDについて ]

ここに書かれていない詳細については"http://jd4linux.sourceforge.jp/"や
"http://sourceforge.jp/projects/jd4linux/wiki/FrontPage"を参照してください。

* 概要

  JDはGTK+2(gtkmm)を使用した"２ちゃんねる [http://www.2ch.net/]"型マルチスレッドBBSを閲覧するためのブラウザです。

* 著作権

  ©2006-2014 "JD Project [http://sourceforge.jp/projects/jd4linux/]"

  パッチやファイルを取り込んだ場合、それらのコピーライトは「JD Project」に統一します。

* ライセンス

  "GNU General Public License, version 2 [http://sourceforge.jp/projects/opensource/wiki/licenses%2FGNU_General_Public_License]"

  将来的にライセンスをGPL3に変更するかもしれません。GPL3以降へのライセンス変更に関してはプロジェクトリーダーに一任させて頂きます。

* 連絡先

  バグ報告その他は"Linux板@２ちゃんねる [http://www.2ch.net/linux/]"のJDスレ、またはJDのヘルプメニューから行くことが出来るサポート掲示板にて行ってください。

* 動作プラットフォーム

  LinuxなどのUnixライクなOS(FreeBSD,OpenBSD,Nexenta,MacOSXでも動作報告例があります)。

  WindowsではMinGWを使ってビルド可能ですが、動作はまだ安定していないようです。

* 通常の起動

  使い方は以下のとおり。

    $ jd [OPTION] [URL,FILE]

  引数にURLを付けて起動する事も出来るので、他のアプリケーションから外部コマンドとしてURLを開く事などが出来る。(JDが扱う事の出来るURLでない場合は設定されているWebブラウザに渡される)

    $ jd http://pc99.2ch.net/test/read.cgi/linux/1234567890/

  ローカルにあるdatファイルを指定して、一時的にスレビュー表示させることも出来る。

    $ jd ./12345.dat

  環境変数 JD_CACHE でキャッシュディレクトリの位置を変更・指定することが可能。指定しなければ ~/.jd がキャッシュディレクトリになる。

    $ JD_CACHE=~/.mycache jd

  環境変数 JD_LOCK でロックファイルの位置を変更・指定することが可能。指定しなければ ~/.jd/JDLOCK がロックファイルになる。

    $ JD_LOCK=~/mylock jd

  オプション

    -h, --help

       ヘルプを表示

    -m, --multi

       多重起動時のサブプロセスであっても終了しない

    -n, --norestore

       前回異常終了した時にバックアップファイルを復元しない

    -s, --skip-setup

       初回起動時の設定ダイアログを表示しない

    -l, --logfile

       エラーなどのメッセージをファイル(キャッシュディレクトリのlog/msglog)に出力する

    -g, --geometry WxH-X+Y

       幅(W)高さ(H)横位置(X)縦位置(Y)の指定。WxHは省略化(例: -g 100x40-10+30, -g -20+100 )

    -V, --version

       バージョン及びconfigureオプションを全て表示

* 多重起動について

  JDはメインプロセス/サブプロセスという関係で動作する。

    メインプロセス: 指令を受け取る事が出来るプロセス
    サブプロセス　: 指令を出す事が出来るプロセス

  通常は最初に起動した物がメインプロセスとなり、メインプロセスは1つだけ存在する事が出来る。メインプロセスが存在する状態で起動したプロセスはサブプロセスとして扱われ、複数存在させる事も可能。なお、指令を受け取るのはメインプロセスのみなので、指令を出す側のサブプロセスでURLは開かれない。

  以下のコマンドを使い分ける事でサブプロセスの起動のしかたをコントロール出来る。

    a. 起動するかどうか確認してサブプロセスを起動

       $ jd
    b. 確認せずにサブプロセスを起動

       $ jd -m
    c. メインプロセスに<URL>を渡してサブプロセスを起動

       $ jd -m http://pc99.2ch.net/test/read.cgi/linux/1234567890/

  注: サブプロセスを残したままメインプロセスを終了していた場合は次に起動したプロセスがメインプロセスとなる。